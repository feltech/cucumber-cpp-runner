name: ci
on:
  pull_request:
  release:
    types: [ published ]
  push:
    tags:
    branches:
      - main
      - develop

env:
  CLANG_TIDY_VERSION: "16.0.6"
  VERBOSE: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Test:
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        build:
          - os: ubuntu-20.04
            compiler: gcc-11
            generator: "Ninja Multi-Config"
          - os: ubuntu-20.04
            compiler: llvm-13
            generator: "Ninja Multi-Config"
          - os: macos-10.15
            compiler: llvm-13
            generator: "Ninja Multi-Config"
          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
        build_type:
          - Release
        build_shared:
          - ON
          - OFF
        enable_ipo:
          - ON
        package_generator:
          - TGZ
#        include:
#          - os: macos-10.15
#            enable_ipo: OFF

    steps:
      - uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.build.compiler }}
          build_type: ${{ matrix.build_type }}
          packaging_maintainer_mode: ON
          generator: ${{ matrix.build.generator }}

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.build.compiler }}
          vcvarsall: ${{ contains(matrix.build.os, 'windows' )}}
          cmake: true
          ninja: true
          conan: 1.59
          ccache: true
          clangtidy: false
          cppcheck: false
          gcovr: false
          opencppcoverage: false

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.2'

      - name: Initialise conan profile
        run: |
          conan profile new default --detect --force

      - name: Linux - Set Conan libstdc++ C++11 ABI
        if: runner.os == 'Linux'
        run: |
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Install external dependencies
        run: |
          bundler install
          conan install -if ${{ github.workspace }}/.conan --build=missing .

      - name: Configure CMake
        run: >
          cmake -S . -B ./build -G "${{matrix.build.generator}}" 
          -D${{ env.PROJECT_NAME }}_ENABLE_TESTS=ON
          -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.enable_ipo }} 
          -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} 
          -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=ON
          -DGIT_SHA:STRING=${{ github.sha }}
        env:
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/.conan

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}} --parallel

      - name: Unix - Test and coverage
        working-directory: ./build
        run: |
          ctest -C ${{matrix.build_type}}

      - name: CPack
        if: matrix.package_generator != ''
        working-directory: ./build
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      - uses: actions/upload-artifact@v3
        with:
          name: packages
          path: build/*-*${{ matrix.build_type }}*-*.*

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        with:
          files: |
            build/*-*${{ matrix.build_type }}*-*.*

  Lint:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-20.04
            compiler: gcc-11
            generator: "Unix Makefiles"
            build_type: Debug
            packaging_maintainer_mode: OFF
            build_shared: ON
            enable_ipo: OFF
            gcov_executable: gcov

    steps:
      - uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.config.compiler }}
          build_type: ${{ matrix.config.build_type }}
          packaging_maintainer_mode: ${{ matrix.config.packaging_maintainer_mode }}
          generator: ${{ matrix.config.generator }}

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.github/constants.env'

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.config.compiler }}
          cmake: true
          ninja: true
          conan: 1.59
          ccache: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}
          cppcheck: true
          gcovr: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.2'

      - name: Initialise conan profile
        run: |
          conan profile new default --detect --force

      - name: Set Conan libstdc++ C++11 ABI
        run: |
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Install external dependencies
        run: |
          bundler install
          conan install -if ${{ github.workspace }}/.conan --build=missing .

      - name: Configure CMake
        run: >
          cmake -S . -B ./build -G "${{ matrix.config.generator }}" 
          -D${{ env.PROJECT_NAME }}_ENABLE_TESTS=ON
          -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{matrix.config.enable_ipo }} 
          -DCMAKE_BUILD_TYPE:STRING=${{matrix.config.build_type}} 
          -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=ON 
          -DGIT_SHA:STRING=${{ github.sha }}
        env:
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/.conan

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.config.build_type}} --parallel

      - name: Test and coverage
        working-directory: ./build
        run: |
          ctest -C ${{matrix.config.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.config.gcov_executable }}'

      - name: Publish to codecov
        uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}