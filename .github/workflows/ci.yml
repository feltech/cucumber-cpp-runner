name: ci
on:
  pull_request:
  release:
    types: [ published ]
  push:
    tags:
    branches:
      - main
      - develop

env:
  CLANG_TIDY_VERSION: "16.0.6"
  VERBOSE: 1
  CONAN_HOME: ~/.conan

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Test:
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false

      matrix:
        # TODO(DF): shared library builds are currently unsupported due issues with Cucumber-Cpp
        # symbol export.
        build:
          - os: ubuntu-20.04
            compiler: gcc-11
            preset: unixlike-gcc-test-package
          - os: ubuntu-20.04
            compiler: llvm-13
            preset: unixlike-clang-test-package
          - os: macos-12
            compiler: false
            preset: unixlike-clang-test-package
          - os: windows-2019
            compiler: msvc
            preset: windows-msvc-test-package

    steps:
      - uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler_key: ${{ matrix.build.compiler }}

      - name: Setup Cpp
        uses: aminya/setup-cpp@v0.35.3
        with:
          compiler: ${{ matrix.build.compiler }}
          vcvarsall: ${{ contains(matrix.build.os, 'windows' )}}
          cmake: true
          ninja: true
          # TODO(DF): Conan 2's default detected profile has problems on Ubuntu Clang. The default
          # profile uses compiler.cppstd=gnu14, for which there are no pre-built packages. Changing
          # this to 17 then gives an error that compiler.runtime must be set, but only for Clang.
          conan: 1.59
          ccache: true
          clangtidy: false
          cppcheck: false
          gcovr: false
          opencppcoverage: false

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.2'

      - name: Initialise conan profile
        run: |
          conan profile new default --detect --force

      - name: Set Conan libstdc++ C++11 ABI
        if: runner.os == 'Linux'
        run: |
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Install external dependencies
        run: |
          bundler install
          conan install -if ${{ github.workspace }}/.conan --build=missing .

      - name: Build, test and package
        run: |
          cmake --workflow --preset ${{ matrix.build.preset }}
        env:
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/.conan
          GIT_SHA: ${{ github.sha }}

      - uses: actions/upload-artifact@v3
        with:
          name: packages
          path: out/package/*-*-*-*-*-*-*.*

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          files: |
            out/package/*-*-*-*-*-*-*.*

  Lint:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler_key: coverage

      - name: Setup Cpp
        uses: aminya/setup-cpp@v0.35.3
        with:
          compiler: gcc-11
          cmake: true
          ninja: true
          conan: 1.59
          ccache: false
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}
          cppcheck: true
          gcovr: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.2'

      - name: Initialise conan profile
        run: |
          conan profile new default --detect --force

      - name: Set Conan libstdc++ C++11 ABI
        run: |
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: Install external dependencies
        run: |
          bundler install
          conan install -if ${{ github.workspace }}/.conan --build=missing .

      - name: Build and test
        run: |
          cmake --workflow --preset unixlike-gcc-coverage
        env:
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/.conan

      - name: Create report
        working-directory: out/build/unixlike-gcc-coverage
        run: |
          gcovr --root ${{ github.workspace }} --print-summary --xml-pretty --xml coverage.xml . 

      - name: Publish to codecov
        uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}